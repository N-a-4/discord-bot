import 'dotenv/config';\nimport {\n  Client, GatewayIntentBits, Partials,\n  ActionRowBuilder, StringSelectMenuBuilder,\n  ButtonBuilder, ButtonStyle,\n  ContainerBuilder, MediaGalleryItemBuilder,\n  SeparatorSpacingSize,\n  MessageFlags\n} from 'discord.js';\nimport { REST as DiscordREST } from '@discordjs/rest';\nimport { Routes } from 'discord.js';\nimport { renderEmbed } from './embed.v2.code.js';\n\nconsole.log('[boot] generated by exporter (TS Code + /emojis.json)');\n\nconst client = new Client({\n  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],\n  partials: [Partials.Channel]\n});\n\nclient.once('ready', () => console.log('[ready]', client.user.tag));\n\n// Guard: ignore invalid emojis in setEmoji\nconst _origSetEmoji = ButtonBuilder.prototype.setEmoji;\nButtonBuilder.prototype.setEmoji = function(emoji){\n  if (!emoji) return this;\n  if (!emoji.id && !emoji.name) return this;\n  return _origSetEmoji.call(this, emoji);\n};\n\nasync function ensureCommands(){\n  const token = process.env.DISCORD_TOKEN, appId = process.env.APPLICATION_ID, guildId = process.env.GUILD_ID;\n  if (!token || !appId || !guildId) return;\n  const rest = new DiscordREST({ version:'10' }).setToken(token);\n  const body = [{ name: 'rustify', description: 'Открыть проект Rustify (CV2)', options: [] }];\n  try { await rest.put(Routes.applicationGuildCommands(appId, guildId), { body }); console.log('[commands] registered', guildId); }\n  catch(e){ console.warn('[commands] register failed', (e && e.rawError) ? e.rawError : e); }\n}\n\nclient.on('interactionCreate', async (interaction) => {\n  try {\n    if (interaction.isChatInputCommand() && interaction.commandName === 'rustify') {\n      await interaction.deferReply({ ephemeral: false });\n      await renderEmbed(interaction, { ContainerBuilder, MediaGalleryItemBuilder, ButtonBuilder, ButtonStyle, SeparatorSpacingSize, MessageFlags, ActionRowBuilder, StringSelectMenuBuilder });\n      return;\n    }\n  } catch (err) {\n    console.error('[interaction] error', err);\n    try { await interaction.reply({ content: 'Ошибка обработки', ephemeral: true }); } catch {}\n  }\n});\n\nawait ensureCommands();\nawait client.login(process.env.DISCORD_TOKEN);\n\n// ---- HTTP server with /emojis.json sync ----\nimport http from 'node:http';\nconst port = process.env.PORT || 3000;\nconst EMOJI_SYNC_KEY = process.env.EMOJI_SYNC_KEY || '';\n\nfunction buildEmojiMap(guild){\n  const map = [];\n  if (!guild) return map;\n  guild.emojis.cache.forEach(e => { map.push({ name: e.name, id: e.id, animated: !!e.animated }); });\n  return map;\n}\n\nhttp.createServer(async (req, res) => {\n  try {\n    const u = new URL(req.url, 'http://localhost');\n    if (u.pathname === '/emojis.json') {\n      const key = u.searchParams.get('key') || '';\n      if (!EMOJI_SYNC_KEY || key !== EMOJI_SYNC_KEY) {\n        res.writeHead(401, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ error: 'unauthorized' }));\n        return;\n      }\n      const gid = u.searchParams.get('guildId') || process.env.GUILD_ID;\n      const guild = gid ? (await client.guilds.fetch(gid)) : null;\n      const items = buildEmojiMap(guild);\n      res.writeHead(200, { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' });\n      res.end(JSON.stringify({ guildId: guild?.id || null, count: items.length, items }));\n      return;\n    }\n    // default keepalive\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Bot is running\n');\n  } catch (e) {\n    res.statusCode = 500; res.end('Error'); console.error('[http] error', e);\n  }\n}).listen(port, () => console.log('[http] on', port));\n