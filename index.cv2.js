import 'dotenv/config';
import {
  Client, GatewayIntentBits, Partials,
  ActionRowBuilder, StringSelectMenuBuilder,
  ButtonBuilder, ButtonStyle,
  ContainerBuilder, MediaGalleryItemBuilder,
  SeparatorSpacingSize,
  MessageFlags
} from 'discord.js';
import { REST as DiscordREST } from '@discordjs/rest';
import { Routes } from 'discord.js';
import { renderEmbed } from './embed.v2.code.js';

console.log('[boot] generated by exporter (Emoji Proxy fallback)');

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
  partials: [Partials.Channel]
});

client.once('ready', () => console.log('[ready]', client.user.tag));

// Guard for setEmoji(undefined) etc.
const _origSetEmoji = ButtonBuilder.prototype.setEmoji;
ButtonBuilder.prototype.setEmoji = function(emoji){
  if (!emoji) return this;
  if (!emoji.id && !emoji.name) return this;
  return _origSetEmoji.call(this, emoji);
};

async function ensureCommands(){
  const token = process.env.DISCORD_TOKEN, appId = process.env.APPLICATION_ID, guildId = process.env.GUILD_ID;
  if (!token || !appId || !guildId) return;
  const rest = new DiscordREST({ version:'10' }).setToken(token);
  const body = [{ name: "rustify", description: "Открыть проект Rustify (CV2)", options: [] }];
  try { await rest.put(Routes.applicationGuildCommands(appId, guildId), { body }); console.log('[commands] registered', guildId); }
  catch(e){ console.warn('[commands] register failed', (e && e.rawError) ? e.rawError : e); }
}

client.on('interactionCreate', async (interaction) => {
  try {
    if (interaction.isChatInputCommand() && interaction.commandName === 'rustify') {
      await interaction.deferReply({ flags: MessageFlags.SuppressNotifications });
      await renderEmbed(interaction, { ContainerBuilder, MediaGalleryItemBuilder, ButtonBuilder, ButtonStyle, SeparatorSpacingSize, MessageFlags, ActionRowBuilder, StringSelectMenuBuilder });
      return;
    }
  } catch (err) {
    console.error('[interaction] error', err);
    try { await interaction.reply({ content: 'Ошибка обработки', ephemeral: true }); } catch {}
  }
});

await ensureCommands();
await client.login(process.env.DISCORD_TOKEN);

// --- keepalive ---
import http from 'node:http';
const port = process.env.PORT || 3000;
http.createServer((_, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Bot is running\n');
}).listen(port, () => console.log('[http] keepalive on', port));
